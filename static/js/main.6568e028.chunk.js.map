{"version":3,"sources":["assets/Countdown.mp3","components/timer/Timer.js","components/countdownInputTime/CountdownInputTime.js","components/countdown/Countdown.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initState","isActive","timeInMs","currentTime","startTime","Timer","props","state","onClickStart","intervalId","setInterval","timerStart","setState","Date","now","clearInterval","prevState","onClickReset","timeFormatting","minutes","Math","floor","seconds","milliseconds","resMilliseconds","btnName","this","className","type","onClick","danger","React","Component","CountdownInputTime","isInactive","onChangeMinutes","onChangeSeconds","maxMinutes","min","max","defaultValue","onChange","disabled","value","defaultProps","pathSound","require","isStopped","onDisabledStart","timeInS","allTimeSecond","Countdown","sound","Audio","loop","onChangeSlider","parseInt","load","play","resMinutes","resSecons","demonstrationoOfProgress","inputAllowed","percent","step","TabPane","Tabs","App","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6568e028.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Countdown.c698b00b.mp3\";","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport './Timer.scss';\r\n\r\nconst initState = {\r\n  isActive: true,\r\n  timeInMs: 0,\r\n  currentTime: 0,\r\n  startTime: 0,\r\n}\r\n\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = initState;\r\n\r\n    this.onClickStart = () => {\r\n      const { isActive } = this.state;\r\n\r\n      if (isActive) {\r\n        this.intervalId = setInterval(this.timerStart, 60);\r\n\r\n        this.setState({\r\n          startTime: Date.now(),\r\n        });\r\n      }\r\n\r\n      this.setState({\r\n        isActive: !isActive,\r\n      });\r\n\r\n      if (!isActive) {\r\n        clearInterval(this.intervalId);\r\n\r\n        this.setState((prevState) => ({\r\n          currentTime: prevState.timeInMs,\r\n        }));\r\n      }\r\n    };\r\n\r\n    this.timerStart = () => {\r\n      this.setState((prevState) => ({\r\n        timeInMs: prevState.currentTime + (Date.now() - prevState.startTime),\r\n      }));\r\n    };\r\n\r\n    this.onClickReset = () => {\r\n      clearInterval(this.intervalId);\r\n\r\n      this.setState({\r\n        isActive: true,\r\n        timeInMs: 0,\r\n        currentTime: 0,\r\n        startTime: 0,\r\n      });\r\n    };\r\n\r\n    /* форматирование времени */\r\n    this.timeFormatting = () => {\r\n      const { timeInMs } = this.state;\r\n\r\n      const minutes = Math.floor(timeInMs / 1000 / 60);\r\n      const seconds = Math.floor(timeInMs / 1000 - minutes * 60);\r\n      const milliseconds = (timeInMs - minutes * 60 * 1000 - seconds * 1000) / 10;\r\n      const resMilliseconds = Math.floor(milliseconds);\r\n\r\n      return `${minutes < 10 ? `0${minutes}` : minutes}:${seconds < 10 ? `0${seconds}` : seconds}:${\r\n        resMilliseconds < 10 ? `0${resMilliseconds}` : resMilliseconds\r\n      }`;\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { isActive } = this.state;\r\n\r\n    const btnName = isActive ? 'START' : 'PAUSE';\r\n\r\n    return (\r\n      <div className=\"timer-container\">\r\n        <div className=\"button-block-timer\">\r\n          <Button className=\"button_timer\" type=\"primary\" onClick={this.onClickStart}>\r\n            {btnName}\r\n          </Button>\r\n          <Button className=\"button_timer\" type=\"primary\" danger onClick={this.onClickReset}>\r\n            RESET\r\n          </Button>\r\n        </div>\r\n        <span className=\"display-timer\">{this.timeFormatting()}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport { InputNumber } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport './CountdownInputTime.scss';\r\n\r\nconst CountdownInputTime = (props) => {\r\n  const { isInactive, minutes, seconds, onChangeMinutes, onChangeSeconds, maxMinutes } = props;\r\n\r\n  /* отключаем инпут с секундами, если 720 минут */\r\n  const timeMaxInMinutes = () => {\r\n    return minutes >= maxMinutes ? isInactive : !isInactive;\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-container\">\r\n      <div className=\"input-container_item\">\r\n        <span className=\"input_header\">Minutes</span>\r\n        <InputNumber\r\n          className=\"input_item\"\r\n          min={0}\r\n          max={maxMinutes}\r\n          defaultValue={0}\r\n          onChange={onChangeMinutes}\r\n          disabled={!isInactive}\r\n          value={minutes}\r\n        />\r\n      </div>\r\n      <div className=\"input-container_item\">\r\n        <span className=\"input_header\">Seconds</span>\r\n        <InputNumber\r\n          className=\"input_item\"\r\n          min={0}\r\n          max={59}\r\n          defaultValue={0}\r\n          onChange={onChangeSeconds}\r\n          disabled={timeMaxInMinutes()}\r\n          value={seconds}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCountdownInputTime.defaultProps = {\r\n  isInactive: true,\r\n  minutes: 0,\r\n  seconds: 0,\r\n  maxMinutes: 720,\r\n};\r\n\r\nCountdownInputTime.propTypes = {\r\n  isInactive: PropTypes.bool,\r\n  minutes: PropTypes.number,\r\n  seconds: PropTypes.number,\r\n  maxMinutes: PropTypes.number,\r\n  onChangeMinutes: PropTypes.func.isRequired,\r\n  onChangeSeconds: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CountdownInputTime;\r\n","import React from 'react';\r\nimport { Button, Slider, Progress } from 'antd';\r\nimport CountdownInputTime from '../countdownInputTime/CountdownInputTime';\r\nimport './Countdown.scss';\r\n\r\nconst pathSound = require('../../assets/Countdown.mp3');\r\n\r\nconst initState = {\r\n  isActive: true,\r\n  isStopped: true,\r\n  onDisabledStart: true,\r\n  startTime: 0,\r\n  currentTime: 0,\r\n  timeInS: 0,\r\n  minutes: 0,\r\n  seconds: 0,\r\n  allTimeSecond: 0,\r\n};\r\n\r\nclass Countdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = initState;\r\n\r\n    this.sound = new Audio(pathSound);\r\n    this.sound.loop = true;\r\n\r\n    /* Slider */\r\n    this.onChangeSlider = (value) => {\r\n      this.setState({\r\n        allTimeSecond: value,\r\n        minutes: parseInt(value / 60, 10),\r\n        seconds: value % 60,\r\n      });\r\n    };\r\n\r\n    /* минуты */\r\n    this.onChangeMinutes = (value) => {\r\n      const { minutes, allTimeSecond } = this.state;\r\n\r\n      /* чтобы не уходило за 720 */\r\n      if (allTimeSecond > minutes) {\r\n        this.setState({\r\n          seconds: 0,\r\n        });\r\n      }\r\n\r\n      this.setState((prevState) => ({\r\n        minutes: value,\r\n        allTimeSecond: prevState.seconds + value * 60,\r\n      }));\r\n    };\r\n\r\n    /* секуды */\r\n    this.onChangeSeconds = (value) => {\r\n      this.setState((prevState) => ({\r\n        seconds: value,\r\n        allTimeSecond: prevState.minutes * 60 + value,\r\n      }));\r\n    };\r\n\r\n    /* START */\r\n    this.onClickStart = () => {\r\n      const { isActive } = this.state;\r\n\r\n      if (isActive) {\r\n        this.intervalId = setInterval(this.timerStart, 60);\r\n\r\n        this.setState({\r\n          startTime: Date.now(),\r\n          isStopped: false,\r\n        });\r\n      }\r\n\r\n      this.setState({\r\n        isActive: !isActive,\r\n      });\r\n\r\n      if (!isActive) {\r\n        clearInterval(this.intervalId);\r\n\r\n        this.setState((prevState) => ({\r\n          isStopped: false,\r\n          timeInS: prevState.timeInS,\r\n          currentTime: prevState.timeInS,\r\n        }));\r\n      }\r\n    };\r\n\r\n    /* RESET */\r\n    this.onClickReset = () => {\r\n      clearInterval(this.intervalId);\r\n      this.sound.load();\r\n      this.setState((prevState) => ({\r\n        isActive: true,\r\n        isStopped: true,\r\n        timeInS: 0,\r\n        currentTime: 0,\r\n        allTimeSecond: prevState.allTimeSecond,\r\n        startTime: prevState.startTime,\r\n        onDisabledStart: true,\r\n      }));\r\n    };\r\n\r\n    this.timerStart = () => {\r\n      const { timeInS, allTimeSecond } = this.state;\r\n\r\n      if (timeInS >= allTimeSecond) {\r\n        clearInterval(this.intervalId);\r\n\r\n        this.setState({\r\n          onDisabledStart: false,\r\n        });\r\n        this.sound.play();\r\n      }\r\n\r\n      this.setState((prevState) => ({\r\n        timeInS: parseInt(prevState.currentTime + (Date.now() - prevState.startTime) / 1000, 10),\r\n      }));\r\n    };\r\n\r\n    /* форматирование времени */\r\n    this.timeFormatting = () => {\r\n      const { allTimeSecond, timeInS } = this.state;\r\n\r\n      const resMinutes = parseInt((allTimeSecond - timeInS) / 60, 10);\r\n      const resSecons = (allTimeSecond - timeInS) % 60;\r\n\r\n      return `${resMinutes < 10 ? `0${resMinutes}` : resMinutes}:${\r\n        resSecons < 10 ? `0${resSecons}` : resSecons\r\n      }`;\r\n    };\r\n\r\n    /* демонстрация прогресса */\r\n    this.demonstrationoOfProgress = () => {\r\n      const { allTimeSecond, timeInS } = this.state;\r\n      const resProgress = parseInt((100 * timeInS) / allTimeSecond, 10);\r\n      return resProgress;\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { isActive, isStopped, allTimeSecond, onDisabledStart, seconds, minutes } = this.state;\r\n\r\n    const inputAllowed = allTimeSecond > 0 ? !onDisabledStart : onDisabledStart;\r\n\r\n    const btnName = isActive ? 'START' : 'PAUSE';\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"countdown-btn-progress\">\r\n          <div className=\"block-button\">\r\n            <Button\r\n              type=\"primary\"\r\n              className=\"button_countdown\"\r\n              onClick={this.onClickStart}\r\n              disabled={inputAllowed}\r\n            >\r\n              {btnName}\r\n            </Button>\r\n            <Button\r\n              danger\r\n              type=\"primary\"\r\n              className=\"button_countdown\"\r\n              onClick={this.onClickReset}\r\n              disabled={isStopped}\r\n            >\r\n              Reset\r\n            </Button>\r\n            <span className=\"display\">{this.timeFormatting()}</span>\r\n          </div>\r\n          <Progress\r\n            className=\"countdown-progress\"\r\n            type=\"circle\"\r\n            percent={this.demonstrationoOfProgress()}\r\n          />\r\n        </div>\r\n        <div className=\"countdown-block-input\">\r\n          <CountdownInputTime\r\n            isInactive={isStopped}\r\n            onChangeMinutes={this.onChangeMinutes}\r\n            onChangeSeconds={this.onChangeSeconds}\r\n            minutes={minutes}\r\n            seconds={seconds}\r\n          />\r\n        </div>\r\n        <div className=\"countdown-slider\">\r\n          <Slider\r\n            step={15}\r\n            min={0}\r\n            max={3600}\r\n            onChange={this.onChangeSlider}\r\n            disabled={!isStopped}\r\n            value={allTimeSecond}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Countdown;\r\n","import React from 'react';\nimport './App.scss';\nimport './Tabs.scss';\nimport { Tabs } from 'antd';\nimport Timer from './components/timer/Timer';\nimport Countdown from './components/countdown/Countdown';\n\nconst { TabPane } = Tabs;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tabs className=\"Tabs\" defaultActiveKey=\"1\">\n        <TabPane tab=\"Timer\" key=\"1\">\n          <Timer />\n        </TabPane>\n        <TabPane tab=\"Countdown\" key=\"2\">\n          <Countdown />\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}