{"version":3,"sources":["components/timer/Timer.js","components/countdown/CountdownInputTime.js","components/countdown/Countdown.js","App.js","serviceWorker.js","index.js","components/countdown/countdown.mp3"],"names":["Timer","props","state","active","timeInMs","accTime","startTime","onClickStart","intervalId","setInterval","run","setState","Date","now","clearInterval","prevState","onClickReset","changeBtn","this","minutes","parseInt","seconds","ms","resSeconds","milliseconds","toString","slice","resMilliseconds","className","type","onClick","danger","React","Component","CountdownInputTime","onDisabledDisplay","onChangeMinutes","onChangeSeconds","min","max","defaultValue","onChange","disabled","value","defaultProps","sound","Howl","src","audio","loop","Countdown","timeInS","allTimeSecond","onDisabledStart","onDisabledReset","onDisabledSlider","onChangeSlider","stop","play","displayMinutes","displaySeconds","full","sec","resSecons","displayProgress","resProgress","inputAllowed","width","percent","step","TabPane","Tabs","App","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.d5d08fe8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'antd';\r\nimport './timer.scss';\r\n\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      active: true,\r\n      timeInMs: '000',\r\n      accTime: 0,\r\n      startTime: 0,\r\n    };\r\n\r\n    this.onClickStart = () => {\r\n      const { active } = this.state;\r\n\r\n      if (active) {\r\n        this.intervalId = setInterval(this.run, 60);\r\n\r\n        this.setState({\r\n          startTime: Date.now(),\r\n        });\r\n      }\r\n\r\n      this.setState({\r\n        active: !active,\r\n      });\r\n\r\n      if (!active) {\r\n        clearInterval(this.intervalId);\r\n\r\n        this.setState((prevState) => ({\r\n          accTime: prevState.timeInMs,\r\n        }));\r\n      }\r\n    };\r\n\r\n    this.run = () => {\r\n      this.setState((prevState) => ({\r\n        timeInMs: prevState.accTime + (Date.now() - prevState.startTime),\r\n      }));\r\n    };\r\n\r\n    this.onClickReset = () => {\r\n      clearInterval(this.intervalId);\r\n\r\n      this.setState({\r\n        active: true,\r\n        timeInMs: '000',\r\n        accTime: 0,\r\n        startTime: 0,\r\n      });\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { timeInMs, active } = this.state;\r\n\r\n    const resMinutes = (ms) => parseInt((ms / (1000 * 60)) % 60, 10);\r\n    const resSeconds = (ms) => parseInt((ms / 1000) % 60, 10);\r\n    const resMilliseconds = (ms) => ms.toString().slice(-3, -1);\r\n\r\n    const minutes = resMinutes(timeInMs);\r\n    const seconds = resSeconds(timeInMs);\r\n    const milliseconds = resMilliseconds(timeInMs);\r\n\r\n    let changeBtn;\r\n    if (active) {\r\n      changeBtn = 'START';\r\n    } else {\r\n      changeBtn = 'PAUSE';\r\n    }\r\n\r\n    // console.log(this.state);\r\n    return (\r\n      <div className=\"timer-container\">\r\n        <div className=\"button-block-timer\">\r\n          <Button className=\"button_timer\" type=\"primary\" onClick={this.onClickStart}>\r\n            {changeBtn}\r\n          </Button>\r\n          <Button className=\"button_timer\" type=\"primary\" danger onClick={this.onClickReset}>\r\n            RESET\r\n          </Button>\r\n        </div>\r\n        <span className=\"display-timer\">\r\n          {minutes < 10 ? `0${minutes}` : minutes}:{seconds < 10 ? `0${seconds}` : seconds}:\r\n          {milliseconds}\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport { InputNumber } from 'antd';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CountdownInputTime = (props) => {\r\n  const { onDisabledDisplay, minutes, seconds, onChangeMinutes, onChangeSeconds } = props;\r\n  return (\r\n    <div className=\"input-container\">\r\n      <div>\r\n        <span>Minutes</span>\r\n        <InputNumber\r\n          className=\"input-container_item\"\r\n          min={0}\r\n          max={720}\r\n          defaultValue={0}\r\n          onChange={onChangeMinutes}\r\n          disabled={onDisabledDisplay}\r\n          value={minutes}\r\n        />\r\n      </div>\r\n      <div>\r\n        <span>Seconds</span>\r\n        <InputNumber\r\n          className=\"input-container_item\"\r\n          min={0}\r\n          max={59}\r\n          defaultValue={0}\r\n          onChange={onChangeSeconds}\r\n          disabled={onDisabledDisplay}\r\n          value={seconds}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCountdownInputTime.defaultProps = {\r\n  onDisabledDisplay: true,\r\n  minutes: 0,\r\n  seconds: 0,\r\n};\r\n\r\nCountdownInputTime.propTypes = {\r\n  onDisabledDisplay: PropTypes.bool,\r\n  minutes: PropTypes.number,\r\n  seconds: PropTypes.number,\r\n  onChangeMinutes: PropTypes.func.isRequired,\r\n  onChangeSeconds: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CountdownInputTime;\r\n","import React from 'react';\r\nimport { Button, Slider, Progress } from 'antd';\r\nimport { Howl } from 'howler';\r\nimport CountdownInputTime from './CountdownInputTime';\r\nimport audio from './countdown.mp3';\r\nimport './countdown.scss';\r\n\r\nconst sound = new Howl({\r\n  src: [audio],\r\n  loop: true,\r\n});\r\n\r\nclass Countdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      active: true,\r\n      startTime: 0,\r\n      accTime: 0,\r\n      timeInS: 0,\r\n      minutes: 0,\r\n      seconds: 0,\r\n      allTimeSecond: 0,\r\n      onDisabledStart: true,\r\n      onDisabledDisplay: true,\r\n      onDisabledReset: true,\r\n      onDisabledSlider: false,\r\n    };\r\n\r\n    /* Slider */\r\n    this.onChangeSlider = (value) => {\r\n      this.setState({\r\n        allTimeSecond: value,\r\n        minutes: parseInt(value / 60, 10), // подсчет минут и отоброжение в инпуте также, как и в табло\r\n        seconds: value % 60, // подсчет секунд и отоброжение в инпуте также, как и в табло\r\n      });\r\n    };\r\n    /* события минуты/секуды */\r\n    this.onChangeMinutes = (value) => {\r\n      this.setState((prevState) => ({\r\n        minutes: value,\r\n        allTimeSecond: prevState.seconds + value * 60,\r\n      }));\r\n    };\r\n\r\n    this.onChangeSeconds = (value) => {\r\n      this.setState((prevState) => ({\r\n        seconds: value,\r\n        allTimeSecond: prevState.minutes * 60 + value,\r\n      }));\r\n    };\r\n\r\n    /* START */\r\n    this.onClickStart = () => {\r\n      const { active } = this.state;\r\n\r\n      /* елси true */\r\n      if (active) {\r\n        this.intervalId = setInterval(this.run, 60);\r\n\r\n        this.setState({\r\n          startTime: Date.now(),\r\n          onDisabledDisplay: false,\r\n          onDisabledReset: false,\r\n          onDisabledSlider: true,\r\n        });\r\n      }\r\n\r\n      this.setState({\r\n        active: !active, // меняем на противоположное\r\n      });\r\n\r\n      /* если false */\r\n      if (!active) {\r\n        clearInterval(this.intervalId);\r\n\r\n        this.setState((prevState) => ({\r\n          timeInS: prevState.timeInS,\r\n          accTime: prevState.timeInS,\r\n        }));\r\n      }\r\n    };\r\n\r\n    /* RESET */\r\n    this.onClickReset = () => {\r\n      clearInterval(this.intervalId);\r\n      sound.stop();\r\n      this.setState((prevState) => ({\r\n        active: true,\r\n        timeInS: 0,\r\n        accTime: 0,\r\n        allTimeSecond: prevState.allTimeSecond,\r\n        startTime: prevState.startTime,\r\n        onDisabledDisplay: true,\r\n        onDisabledSlider: false,\r\n        onDisabledReset: true,\r\n        onDisabledStart: true,\r\n      }));\r\n    };\r\n\r\n    this.run = () => {\r\n      const { timeInS } = this.state;\r\n      const { allTimeSecond } = this.state;\r\n\r\n      /* чтобы не уходило дальше нуля */\r\n      if (timeInS >= allTimeSecond) {\r\n        clearInterval(this.intervalId);\r\n\r\n        /* отключаем кнопку старт, когда истекло время */\r\n        this.setState({\r\n          // timeInS: 0,\r\n          onDisabledStart: false,\r\n        });\r\n        sound.play();\r\n      }\r\n\r\n      this.setState((prevState) => ({\r\n        timeInS: parseInt(prevState.accTime + (Date.now() - prevState.startTime) / 1000, 10), // !!! prevState.accTime - это предыдущее время, от которго начнется отсчет при нажатии паузы\r\n      }));\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { active } = this.state;\r\n    const { timeInS } = this.state;\r\n    const { allTimeSecond } = this.state;\r\n    const { onDisabledStart } = this.state;\r\n    const { onDisabledDisplay } = this.state;\r\n    const { onDisabledReset } = this.state;\r\n    const { onDisabledSlider } = this.state;\r\n    const { seconds } = this.state; //! !! добавим в инпут, чтобы видеть значение в секундах при перемещении ползунка\r\n    const { minutes } = this.state; //! !! добавим в инпут, чтобы видеть значение в минутах при перемещении ползунка\r\n\r\n    const resMinutes = (full, sec) => parseInt((full - sec) / 60, 10);\r\n    const resSecons = (full, sec) => (full - sec) % 60;\r\n    const resProgress = (full, sec) => parseInt((100 * sec) / full, 10);\r\n\r\n    const displayMinutes = resMinutes(allTimeSecond, timeInS);\r\n    const displaySeconds = resSecons(allTimeSecond, timeInS);\r\n    const displayProgress = resProgress(allTimeSecond, timeInS); // прогресс\r\n\r\n    /* проверка на ноль */\r\n    const inputAllowed = allTimeSecond > 0 ? !onDisabledStart : onDisabledStart;\r\n\r\n    /* меняем START на PAUSE */\r\n    const changeBtn = active ? 'START' : 'PAUSE';\r\n\r\n    // console.log(this.state);\r\n    return (\r\n      <div>\r\n        <div className=\"countdown-btn-progress\">\r\n          <div className=\"block-button\">\r\n            <Button\r\n              type=\"primary\"\r\n              className=\"button_countdown\"\r\n              onClick={this.onClickStart}\r\n              disabled={inputAllowed}\r\n            >\r\n              {changeBtn}\r\n            </Button>\r\n            <Button\r\n              danger\r\n              type=\"primary\"\r\n              className=\"button_countdown\"\r\n              onClick={this.onClickReset}\r\n              disabled={onDisabledReset}\r\n            >\r\n              Reset\r\n            </Button>\r\n            <span className=\"display\">\r\n              {displayMinutes < 10 ? `0${displayMinutes}` : displayMinutes}:\r\n              {displaySeconds < 10 ? `0${displaySeconds}` : displaySeconds}\r\n            </span>\r\n          </div>\r\n          <Progress width={127} type=\"circle\" percent={displayProgress} />\r\n        </div>\r\n        <div className=\"countdown-block-input\">\r\n          <CountdownInputTime\r\n            onChangeMinutes={this.onChangeMinutes}\r\n            onChangeSeconds={this.onChangeSeconds}\r\n            minutes={minutes}\r\n            seconds={seconds}\r\n            onDisabledDisplay={!onDisabledDisplay}\r\n          />\r\n        </div>\r\n        <div className=\"countdown-slider\">\r\n          <Slider\r\n            step={15}\r\n            min={0}\r\n            max={3600}\r\n            onChange={this.onChangeSlider}\r\n            disabled={onDisabledSlider}\r\n            value={allTimeSecond}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Countdown;\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport './Tabs.scss';\r\nimport { Tabs } from 'antd';\r\nimport Timer from './components/timer/Timer';\r\nimport Countdown from './components/countdown/Countdown';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Tabs className=\"Tabs\" defaultActiveKey=\"1\">\r\n        <TabPane tab=\"Timer\" key=\"1\">\r\n          <Timer />\r\n        </TabPane>\r\n        <TabPane tab=\"Countdown\" key=\"2\">\r\n          <Countdown />\r\n        </TabPane>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/countdown.c698b00b.mp3\";"],"sourceRoot":""}